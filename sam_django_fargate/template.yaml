AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam_django_fargate

  Example configuration for Project created with django and run ECR on Fargate

Resources:
  DjangoCluster:
    Type: AWS::ECS::Cluster

  DjangoTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  DjangoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/django-fargate
      RetentionInDays: 3

  DjangoTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities: [FARGATE]
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt DjangoTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: django
          Image: 981539705167.dkr.ecr.us-east-1.amazonaws.com/sam_django_fargate:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/sam-django-fargate
              awslogs-region: us-east-1
              awslogs-stream-prefix: django
          PortMappings:
            - ContainerPort: 8000

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: vpc-00b26c378ac9faadc
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ALB
      VpcId: vpc-00b26c378ac9faadc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  DjangoSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to Django container
      VpcId: vpc-00b26c378ac9faadc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: DjangoALB
      Subnets:
        - subnet-0a496c012871ce06d
        - subnet-0e417a134ea913fe5
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  DjangoService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref DjangoCluster
      LaunchType: FARGATE
      PlatformVersion: LATEST
      TaskDefinition: !Ref DjangoTaskDefinition
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - subnet-0a496c012871ce06d
            - subnet-0e417a134ea913fe5
          SecurityGroups:
            - !Ref DjangoSecurityGroup
      LoadBalancers:
        - ContainerName: django
          ContainerPort: 8000
          TargetGroupArn: !Ref ALBTargetGroup
